import{_ as n,c as e,a as s,b as o,t,d as l,o as p}from"./app.310de484.js";const g=JSON.parse('{"title":".vector","description":"","frontmatter":{"title":".vector","order":0},"headers":[],"relativePath":"api-server/utility/vector.md","lastUpdated":1675421297000}'),r={name:"api-server/utility/vector.md"},c={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y=l(`<h3 id="distance" tabindex="-1">distance <a class="header-anchor" href="#distance" aria-hidden="true">#</a></h3><p>This is a simple 3D distance calculation to check the distance between two Vector3&#39;s. </p><p><em>This was implemented at a time when alt:V didn&#39;t have these utilities.</em></p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dist </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utility</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">distance</span><span style="color:#A6ACCD;">(player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> player2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="distance2d" tabindex="-1">distance2d <a class="header-anchor" href="#distance2d" aria-hidden="true">#</a></h3><p>Same as above, but doesn&#39;t use z axis for calculation. Slightly less intensive.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dist </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utility</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">distance2d</span><span style="color:#A6ACCD;">(player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> player2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getclosestentity" tabindex="-1">getClosestEntity <a class="header-anchor" href="#getclosestentity" aria-hidden="true">#</a></h3><p>Given a list of entities such as a player, or a vehicle you can simply pass a list of them to get the closest type.</p><h4 id="arguments" tabindex="-1">arguments <a class="header-anchor" href="#arguments" aria-hidden="true">#</a></h4><ul><li>player position</li><li>player rotation</li><li>an array of entities (players, or vehicles)</li><li>a maximum distance to look for, anything lower is consider closer / closest.</li></ul><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> players </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">all]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> aPlayer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utility</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClosestEntity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Player</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">all</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> players</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getforwardvector" tabindex="-1">getForwardVector <a class="header-anchor" href="#getforwardvector" aria-hidden="true">#</a></h3><p>Gets a forward vector of a player or vehicle based on their rotation.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> directionPlayerIsFacing </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utility</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getForwardVector</span><span style="color:#A6ACCD;">(player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rot)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="getvectorinfrontofplayer" tabindex="-1">getVectorInFrontOfPlayer <a class="header-anchor" href="#getvectorinfrontofplayer" aria-hidden="true">#</a></h3><p>Returns a position directly in front of a player based on distance.</p><p><strong>arguments</strong></p><ul><li>player</li><li>distance</li></ul><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> posInFrontOf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utility</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getVectorInFrontOfPlayer</span><span style="color:#A6ACCD;">(player</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h3 id="isbetweenvectors" tabindex="-1">isBetweenVectors <a class="header-anchor" href="#isbetweenvectors" aria-hidden="true">#</a></h3><p>Simply checks if a position is between two vector points.</p><p><strong>arguments</strong></p><ul><li>positionToCheck = vector3 position</li><li>pos1 - vector3 position</li><li>pos2 - vector3 position</li></ul><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> isBetween </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utility</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isBetweenVectors</span><span style="color:#A6ACCD;">(posToCheck</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,25);function D(a,A,F,C,d,h){return p(),e("div",null,[s("h1",c,[o(t(a.$frontmatter.title)+" ",1),i]),y])}const v=n(r,[["render",D]]);export{g as __pageData,v as default};
