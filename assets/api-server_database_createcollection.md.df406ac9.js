import{_ as t,c as s,a as e,b as o,t as l,d as n,o as c}from"./app.310de484.js";const A=JSON.parse('{"title":".funcs.createCollection","description":"","frontmatter":{"title":".funcs.createCollection","order":0},"headers":[],"relativePath":"api-server/database/createcollection.md","lastUpdated":1675421297000}'),r={name:"api-server/database/createcollection.md"},i={id:"frontmatter-title",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=n(`<p>Used to create a collection if it does not exist. A collection is like a <code>table</code> from MySQL. However, we don&#39;t have to manually create what the table can hold. A table in MongoDB can hold almost any data types without defining them.</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><p>Arguments</p><ul><li>collection -&gt; string <ul><li>The name of the collection to create.</li><li>Example: &#39;pottedplants&#39;</li></ul></li></ul><p>Returns</p><ul><li>Promise of successful collection creation as a boolean.</li></ul><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">database</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">funcs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createCollection</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pottedplants</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,7);function _(a,h,u,D,f,y){return c(),s("div",null,[e("h1",i,[o(l(a.$frontmatter.title)+" ",1),p]),d])}const C=t(r,[["render",_]]);export{A as __pageData,C as default};
