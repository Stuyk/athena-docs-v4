import{_ as n,c as a,a as s,b as l,t as o,d as p,o as t}from"./app.310de484.js";const F=JSON.parse('{"title":"Creating Plugins","description":"","frontmatter":{"title":"Creating Plugins","order":-98},"headers":[],"relativePath":"plugins/creating-plugins.md","lastUpdated":1675421297000}'),i={name:"plugins/creating-plugins.md"},r={id:"frontmatter-title",tabindex:"-1"},c=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=p(`<p>Plugins in the Athena Framework are made in a specific way. Meaning, that following this general structure will help you create robust plugins without touching the core of the framework.</p><p>It is important that when a plugin is created that is does not adjust the core of the Athena Framework. This ensures that compatibility is future-proof and additional updates to the plugin can be made without over complicating it.</p><h3 id="visual-learner-here-s-a-template" tabindex="-1">Visual Learner? Here&#39;s a Template <a class="header-anchor" href="#visual-learner-here-s-a-template" aria-hidden="true">#</a></h3><p>There is a template that exists as a general starting point to copy / paste into your server infrastructure to begin building a plugin. You can check that out here:</p><p><a href="https://github.com/Stuyk/altv-athena-plugin-template" target="_blank" rel="noreferrer">https://github.com/Stuyk/altv-athena-plugin-template</a></p><h3 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-hidden="true">#</a></h3><p>All plugins should be placed inside the <code>src/core/plugins</code> folder.</p><p>The folder structure is very specific.</p><p>It consists of several folders inside your main folder.</p><ul><li>server <ul><li>This should all be server-side code</li></ul></li><li>client <ul><li>This should all be client-side code</li></ul></li><li>shared <ul><li>This should be shared between server, client, and WebView</li></ul></li><li>WebView <ul><li>This is a WebView Page you want to inject</li><li>DOES NOT SUPPORT IMAGES, SOUNDS, ETC. THEY BELONG IN THE <code>src-webviews/public</code> folder</li></ul></li></ul><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">\u{1F4C1} src/core/plugins/core-example</span></span>
<span class="line"><span style="color:#A6ACCD;">  |\u2500\u2500\u2500dependencies.json</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u251C\u2500\u2500\u2500\u{1F4C1} client</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2502   index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  |   \u2502</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2514\u2500\u2500\u2500\u{1F4C1} src  </span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502       \u2502   file1.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502       \u2502   file2.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502       \u2502   file3.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  |</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u251C\u2500\u2500\u2500\u{1F4C1} server</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2502   index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2502</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2514\u2500\u2500\u2500\u{1F4C1} src</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502       \u2502   file1.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502       \u2502   file2.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502       \u2502   file3.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u251C\u2500\u2500\u2500\u{1F4C1} shared</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2502   file1.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2502   file2.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502   \u2502   file3.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2502</span></span>
<span class="line"><span style="color:#A6ACCD;">  \u2514\u2500\u2500\u2500\u{1F4C1} webview</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502   Example.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502   tsconfig.json</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2514\u2500\u2500\u2500\u{1F4C1} images</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502    \u2502 myimage.jpg</span></span>
<span class="line"><span style="color:#A6ACCD;">      |    | my-other-image.png</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u251C\u2500\u2500\u2500components</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502       Component1.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502       Component2.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2502       Component3.vue</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="naming" tabindex="-1">Naming <a class="header-anchor" href="#naming" aria-hidden="true">#</a></h4><p>Rules for Files and Folder(s)</p><ul><li>Plugins should use <code>kebab-case</code> for folder names. <ul><li>ie. <code>door-plugin</code></li></ul></li><li>File names should be <code>camelCase</code>. <ul><li>ie. <code>mainDoorController.ts</code></li></ul></li><li>Plugins should use their respective folders for imports <ul><li>Server: <code>src/core/plugins/example-plugin/server</code><ul><li>The main import file for the plugin should be called <code>index.ts</code>.</li></ul></li><li>Client: <code>src/core/plugins/example-plugin/client</code><ul><li>The main import file for the plugin should be called <code>index.ts</code>.</li></ul></li><li>Shared: <code>src/core/plugins/example-plugin/shared</code></li><li>WebView: <code>src/core/plugins/example-plugin/webview</code><ul><li>There must be a main <code>*.vue</code> file in this folder.</li><li>Keep all components and additional vue files in subfolders. <ul><li>Images: <code>src/core/plugins/example-plugin/webview/images</code><ul><li>Must be <code>jpg</code>, <code>png</code>, <code>jpeg</code>, <code>gif</code>, or <code>webm</code></li></ul></li></ul></li></ul></li></ul></li><li>Entry file for a Plugin should be <code>index.ts</code><ul><li>This applies to both <code>client</code> and <code>server</code>.</li></ul></li></ul><p>It is up to you as the plugin creator to provide <code>GOOD</code> instruction(s) on installation and removal of the plugin.</p><h4 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-hidden="true">#</a></h4><p>If you have server-side dependencies for an npm package you can create a <code>dependencies.json</code> in the root of your plugin structure to auto-install dependencies for an end-user.</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">discord.js@latest</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">glob</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Dependencies in <code>devDependencies</code> will not be installed during production mode of the server. Meaning if you want to use an npm package in the game mode you should put it in dependencies.</p><p><em>Example dependencies.json</em></p><h3 id="registering-a-server-plugin" tabindex="-1">Registering a Server Plugin <a class="header-anchor" href="#registering-a-server-plugin" aria-hidden="true">#</a></h3><p>In your plugin&#39;s <code>index</code> file you should register your plugin.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> alt </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">alt-server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PluginSystem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../../server/systems/plugins</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> PLUGIN_NAME </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Example Plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">PluginSystem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerPlugin</span><span style="color:#A6ACCD;">(PLUGIN_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Initialize other things for your plugin here...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">~lg~</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">PLUGIN_NAME</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> was Loaded</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="learn-from-example" tabindex="-1">Learn from Example <a class="header-anchor" href="#learn-from-example" aria-hidden="true">#</a></h3><p>Last but not least you should always look at the existing plugins to get a general idea of how they work and how they&#39;re being implemented. There are plenty of them to look at in the core framework, and there are additional plugins available in the Athena Discord.</p>`,25);function u(e,D,y,C,A,h){return t(),a("div",null,[s("h1",r,[l(o(e.$frontmatter.title)+" ",1),c]),d])}const m=n(i,[["render",u]]);export{F as __pageData,m as default};
