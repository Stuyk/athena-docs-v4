import{_ as e,c as n,a as s,b as t,t as o,d as p,o as l}from"./app.c8ecc363.js";const C=JSON.parse('{"title":"Installing on Linux","description":"","frontmatter":{"title":"Installing on Linux","order":-96},"headers":[],"relativePath":"intro/install/installing-on-linux.md","lastUpdated":1675421894000}'),r={name:"intro/install/installing-on-linux.md"},i={id:"frontmatter-title",tabindex:"-1"},c=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=p(`<h2 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-hidden="true">#</a></h2><p>Linux installation should be using Ubuntu 20.04+ or greater. The author of this documentation has used Ubuntu 20.04+ without any issues.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>()\\[]{}|:;&#39;&lt;&gt;?,!@#$%^&amp;\\*+=</code></p><p>These cannot be used in your folder pathing. Do <strong>NOT</strong> use them.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>As a general recommendation, you should only be using Linux for production. It is highly recommended to develop on Athena in a Windows environment as the build times are much faster.</p></div><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-hidden="true">#</a></h2><p>Install or perform all actions in this section. Copy the entire code block and paste it.</p><h3 id="git" tabindex="-1">GIT <a class="header-anchor" href="#git" aria-hidden="true">#</a></h3><p>Grab the latest version of GIT.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt update &amp;&amp; sudo apt install git</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="curl" tabindex="-1">CURL <a class="header-anchor" href="#curl" aria-hidden="true">#</a></h3><p>Grab the latest version of Curl.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt update &amp;&amp; sudo apt install curl</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="wget" tabindex="-1">wget <a class="header-anchor" href="#wget" aria-hidden="true">#</a></h3><p>Grab the latest version of wget.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt update &amp;&amp; sudo apt install wget</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="ufw" tabindex="-1">UFW <a class="header-anchor" href="#ufw" aria-hidden="true">#</a></h3><p>Grab the latest verson of UFW (Uncomplicated Firewall)</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt-get install ufw</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="nodejs-16-through-nvm" tabindex="-1">NodeJS 16+ through NVM <a class="header-anchor" href="#nodejs-16-through-nvm" aria-hidden="true">#</a></h3><p>Grab at least version 17+ for NodeJS through nvm.</p><h4 id="uninstall-older-versions" tabindex="-1">Uninstall Older Versions* <a class="header-anchor" href="#uninstall-older-versions" aria-hidden="true">#</a></h4><p>This step only applies if you installed NVM in the past.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">nvm uninstall OLD_VERSION_HERE</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="install-latest-version-of-nvm" tabindex="-1">Install Latest Version of NVM <a class="header-anchor" href="#install-latest-version-of-nvm" aria-hidden="true">#</a></h4><p>Install the NVM script for selecting NodeJS versions.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;&amp; export NVM_DIR=&quot;$HOME/.nvm&quot; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;&amp; [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;&amp; [ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">nvm install 17</span></span>
<span class="line"><span style="color:#A6ACCD;">nvm use 17</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="mongodb" tabindex="-1">MongoDB <a class="header-anchor" href="#mongodb" aria-hidden="true">#</a></h3><p>Keep in mind this is optional if you use MongoDB Atlas for your database. If you are using a local database please install MongoDB server here.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt update</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt install mongodb-org</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo systemctl start mongod.service</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo systemctl status mongod</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Instructions pulled from <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noreferrer">here</a>.</p><h3 id="libatomic1" tabindex="-1">libatomic1 <a class="header-anchor" href="#libatomic1" aria-hidden="true">#</a></h3><p>Grab the libatomic1 library.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt-get update &amp;&amp; sudo apt-get install libatomic1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="create-a-github-account" tabindex="-1">Create a Github Account <a class="header-anchor" href="#create-a-github-account" aria-hidden="true">#</a></h3><p>Yes you are going to need a Github account. You are also going to need to setup an SSH key for your Github account. It is covered below.</p><p><a href="https://github.com/signup" target="_blank" rel="noreferrer">Sign Up with Github</a></p><h2 id="setup-ssh-key" tabindex="-1">Setup SSH Key <a class="header-anchor" href="#setup-ssh-key" aria-hidden="true">#</a></h2><p>GitHub has really good <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh" target="_blank" rel="noreferrer">SSH Setup Instructions</a> but they may not be entirely clear for newer developers. If you are comfortable with normal documentation give the above link a try. Make sure to select the Linux tab.</p><h3 id="open-a-terminal" tabindex="-1">Open a Terminal <a class="header-anchor" href="#open-a-terminal" aria-hidden="true">#</a></h3><p>Git Bash is something that should come with GIT by default. Enter <code>Git Bash</code> in your windows search to open it.</p><p><strong>Generate a New SSH Key</strong></p><p>Enter the following in a Terminal.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>When you&#39;re prompted to &quot;Enter a file in which to save the key,&quot; press Enter. This accepts the default file location.</p><p>It may ask you for a password. </p><p>Hitting enter twice will automatically default to <code>no password</code>.</p><p><strong>Start the SSH Agent</strong></p><p>Enter the following in a Terminal.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">eval &quot;$(ssh-agent -s)&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><em>It should respond with &#39;Agent pid XYZ&#39;</em></p><p><strong>Add the SSH Key to the SSH Agent</strong></p><p>Enter the following in a Terminal:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">ssh-add ~/.ssh/id_ed25519</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Add the SSH Key to GitHub</strong></p><p>Enter the following in a Terminal:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">cat ~/.ssh/id_ed25519.pub</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Copy</strong> the text printed from <code>ssh-ed25519</code> all the way to your email.</p><p><img src="https://i.imgur.com/NPjcWhW.png" alt="25519.pub key copy example"></p><p>Navigate to your GitHub settings and the <code>SSH and GPG keys</code> section.</p><p>Click on <code>New SSH Key</code></p><p><img src="https://i.imgur.com/VyCobd5.png" alt="Click New SSH Key to add it to your GitHub."></p><p>Give the key a name, and <strong>paste the public key into the larger text box</strong>.</p><h2 id="port-forwarding" tabindex="-1">Port Forwarding <a class="header-anchor" href="#port-forwarding" aria-hidden="true">#</a></h2><p>At the very least you will need to open port 7788 for your main server.</p><p>You may need to Forward Ports in your Server Panel, Router, etc. If you are running Athena on a server it is likely you will need to add 7788 to an additional Firewall somewhere in your server providers panel.</p><h3 id="ufw-instructions" tabindex="-1">UFW Instructions <a class="header-anchor" href="#ufw-instructions" aria-hidden="true">#</a></h3><p>Be very careful about doing this because you need to ensure port <code>22</code> is setup for UFW.</p><p>We&#39;re going to do each of these commands one at a time.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo ufw allow 22</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo ufw allow ssh</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo ufw allow 7788</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo ufw enable</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><em>You can verify that ports have been opened successfully after you setup the rest of Athena.</em></p><h2 id="setup-private-repo" tabindex="-1">Setup Private Repo <a class="header-anchor" href="#setup-private-repo" aria-hidden="true">#</a></h2><p>Create a <strong>New</strong> <strong>Repository</strong> on GitHub.</p><p>Visit GitHub and ensure you are signed in.</p><p><img src="https://i.imgur.com/6wSCjfu.png" alt=""></p><p>Use the following settings and hit <strong>create</strong>.</p><p><img src="https://i.imgur.com/CfZm096.png" alt=""></p><p><img src="https://i.imgur.com/nlsGGOM.png" alt=""></p><p>Leave the page open and do not touch anything. You need to do some other things first.</p><h3 id="clone-into-private-repository" tabindex="-1">Clone into Private Repository <a class="header-anchor" href="#clone-into-private-repository" aria-hidden="true">#</a></h3><p>Open a Terminal.</p><p>Enter the following command(s) in order.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/Stuyk/altv-athena</span></span>
<span class="line"><span style="color:#A6ACCD;">cd altv-athena</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Once inside of the repository you need to setup a new remote URL. Copy the URL from the page you left open, and paste it where <code>url_for_other_repo_here</code> is in the command below.</p><p><img src="https://i.imgur.com/SmI37H9.png" alt=""></p><p>After, running this command do the following command(s)</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git remote set-url --push origin url_for_other_repo_here</span></span>
<span class="line"><span style="color:#A6ACCD;">git add *</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m &quot;init&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add upstream https://github.com/Stuyk/altv-athena</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote set-url --push upstream DISABLE</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Instead of disabling the push upstream, you can also set this to your origin repository.</p><p>An example of how to change the remote push URL is here:</p><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#A6ACCD;">git remote set</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">url </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">push origin your_repository_url</span></span>
<span class="line"></span></code></pre></div><p>If you refresh the GitHub page you should see a clone of Athena inside of your private repository if you were successful.</p><h3 id="pushing-updates" tabindex="-1">Pushing updates <a class="header-anchor" href="#pushing-updates" aria-hidden="true">#</a></h3><p>When you make changes to the code base you can push it by doing:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git add .</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m &quot;Whatever You Changed&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin master</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="installing-dependencies" tabindex="-1">Installing Dependencies <a class="header-anchor" href="#installing-dependencies" aria-hidden="true">#</a></h2><p>This installs all NodeJS packages and dependencies that help run the server.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="installing-server-files" tabindex="-1">Installing Server Files <a class="header-anchor" href="#installing-server-files" aria-hidden="true">#</a></h2><p>From this point forward you can simply run this <code>npm</code> command to update dependencies.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm run update</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="starting-the-server" tabindex="-1">Starting the Server <a class="header-anchor" href="#starting-the-server" aria-hidden="true">#</a></h2><p><strong>Hey Listen,</strong> normally you start the server through altv-server.exe but <strong>we do not do that with Athena</strong>. There are other programs that run along-side Athena that allow it to function. You will need to run one of the commands below.</p><h3 id="update-the-server-cfg" tabindex="-1">Update the server.cfg <a class="header-anchor" href="#update-the-server-cfg" aria-hidden="true">#</a></h3><p>Do not modify the server.cfg, yes you are reading this correctly.</p><p>Instead, you should do the following.</p><p>Open 1 of the 3 configuration(s) in the <code>configs</code> folder.</p><p>You should see any of the following configurations:</p><ul><li>dev.json</li><li>devtest.json</li><li>prod.json</li></ul><p>Edit all of these but remember this very important rule.</p><p>Do not change &#39;host&#39; because 0.0.0.0 is correct.</p><h3 id="production-mode" tabindex="-1">Production Mode <a class="header-anchor" href="#production-mode" aria-hidden="true">#</a></h3><p>This is the mode you should use when you are having users connect.</p><p>Enter the following in a terminal:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm run linux</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><em>Linux only supports production mode as you should be doing most of your development on Windows based computers.</em></p><h2 id="checking-ports" tabindex="-1">Checking Ports <a class="header-anchor" href="#checking-ports" aria-hidden="true">#</a></h2><p>Check if the ports are currently open <strong>while the server is running</strong>. Check port <code>7788</code>.</p><p><a href="https://www.yougetsignal.com/tools/open-ports/" target="_blank" rel="noreferrer">Check Ports with YouGetSignal</a></p><h2 id="connecting" tabindex="-1">Connecting <a class="header-anchor" href="#connecting" aria-hidden="true">#</a></h2><p>Remember to get the <a href="https://altv.mp" target="_blank" rel="noreferrer">https://altv.mp/</a> client and connect.</p><h3 id="what-ip-to-use" tabindex="-1">What IP to use? <a class="header-anchor" href="#what-ip-to-use" aria-hidden="true">#</a></h3><p>If you are running this on your local machine you should connect to <code>127.0.0.1:7788</code>.</p><p>If you are running this on an external server you should connect to the server&#39;s IP address.</p><h2 id="successful-installation" tabindex="-1">Successful Installation <a class="header-anchor" href="#successful-installation" aria-hidden="true">#</a></h2><p>A successful installation and bootup will look like the following:</p><p><img src="https://i.imgur.com/NuppQyc.png" alt=""></p>`,134);function u(a,h,g,y,m,b){return l(),n("div",null,[s("h1",i,[t(o(a.$frontmatter.title)+" ",1),c]),d])}const f=e(r,[["render",u]]);export{C as __pageData,f as default};
